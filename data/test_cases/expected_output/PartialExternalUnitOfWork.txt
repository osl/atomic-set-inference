
=== Ledu/illinois/cs/osl/aj/testcases/PartialExternalUnitOfWork$SecretService;

* Units of work:
  observe(Ledu/illinois/cs/osl/aj/testcases/common/Person;)V  [
    0: unitfor( [] )
  ]
  observe(Ledu/illinois/cs/osl/aj/testcases/common/Person;)V$3$synchronized  [
    0: unitfor( ['firstName'] )
  ]
  swapIdentities(Ledu/illinois/cs/osl/aj/testcases/common/Person;Ledu/illinois/cs/osl/aj/testcases/common/Person;)V  [
    0: unitfor( ['firstName'] )
    1: unitfor( [] )
  ]
  swapIdentities(Ledu/illinois/cs/osl/aj/testcases/common/Person;Ledu/illinois/cs/osl/aj/testcases/common/Person;)V$22$synchronized  [
    1: unitfor( ['firstName'] )
  ]
  swapIdentities(Ledu/illinois/cs/osl/aj/testcases/common/Person;Ledu/illinois/cs/osl/aj/testcases/common/Person;)V$3$synchronized  [
    1: unitfor( ['firstName'] )
  ]


=== Ledu/illinois/cs/osl/aj/testcases/PartialExternalUnitOfWork$WorkerThread;

* Atomic sets:
  - { p1=['firstName'], p2 }


=== Ledu/illinois/cs/osl/aj/testcases/PartialExternalUnitOfWork;


=== Ledu/illinois/cs/osl/aj/testcases/common/IteratingThread;


=== Ledu/illinois/cs/osl/aj/testcases/common/Person;

* Atomic sets:
  - { firstName }

